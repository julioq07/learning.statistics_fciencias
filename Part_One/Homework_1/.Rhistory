# Cargamos la data
data <- read.csv('BASE.csv')
setwd("~/Projects/learning.statistics_fciencias/Part_One/Homework_1")
# Cargamos la data
data <- read.csv('BASE.csv')
View(data)
install.packages("tidyverse")
install.packages("tibble")
install.packages("devtools")
devtools::install_github("tidyverse/tibble")
install.packages("tibble")
data <- as_tibble(data)
library(tibble)
data <- as_tibble(data)
data$Precio_Venta
typeof(data$Precio_Venta)
var(data$Precio_Venta)
pv <- data$Precio_Venta
pv <- sub(",","", pv, fixed=TRUE)
pv <- sub(",","", pv, fixed=TRUE)
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
d=TRUE))
pv <- as.numeric(sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE))
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
var(pv)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
pv <- data$Precio_Venta
as.numeric("1,700.95")
as.numeric("1700.95")
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)[1]
as.numeric(pv)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)[1]
as.numeric(pv)
as.numeric("1700.95")
typeof("1700.95")
typeof(pv)
a <- 1,700.05
a <- 1700.05
typeof(a)
a+1
as.double("1,700.95")
as.double("1700.95")
as.double(pv)
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)[1]
typeof(pv)
as.double(pv)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)[1]
typeof(pv)
as.double(pv)
typeof("1700.95")
as.double("1700.95")
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)[1]
pv+1
?as.numeric
as.numeric("1700.95")
options(digits=9)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)[1]
typeof(pv)
as.double(pv)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
typeof(pv)
as.double(pv)
pv <- data$Precio_Venta
pv <- sub(",","", sub(",","", pv, fixed=TRUE), fixed=TRUE)
typeof(pv)
pv <- as.double(pv)
var(pv)
sd(pv)
quantile(pv, 0.75) - quantile(pv, 0.25)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Checamos el tipo de los datos
typeof(pv)
pv <- as.double(pv)
# Checamos el tipo de los datos
typeof(pv)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Primero fijamos la cantidad de dígitos permitidos al convertir
options(digits=9)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Primero fijamos la cantidad de dígitos permitidos al convertir
options(digits=9)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.double(pv)
# Checamos el tipo de los datos
typeof(pv)
var(pv)
sd(pv)
quantile(pv, 0.75) - quantile(pv, 0.25)
# Primero fijamos la cantidad de dígitos permitidos al convertir
options(digits=9)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.double(pv)
# Checamos el tipo de los datos
typeof(pv)
var(pv)
sd(pv)
quantile(pv, 0.75) - quantile(pv, 0.25)
# Primero fijamos la cantidad de dígitos permitidos al convertir
options(digits=9)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Checamos el tipo de los datos
typeof(pv)
# Cargamos la data
data <- read.csv('BASE.csv')
# Primero fijamos la cantidad de dígitos permitidos al convertir
options(digits=9)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Checamos el tipo de los datos
typeof(pv)
var(pv)
sd(pv)
quantile(pv, 0.75) - quantile(pv, 0.25)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)[1]
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Checamos el tipo de los datos
typeof(pv)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Checamos el tipo de los datos
typeof(pv)
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)[1]
ppv <- apply(pv, sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE))
# Cargamos la data
data <- read.csv('BASE.csv')
ppv <- apply(pv, sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE))
ppv <- apply(data$Precio_Venta, sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE))
?apply
ppv <- apply(data$Precio_Venta, 1, sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE))
# Cargamos la data
data <- read.csv('BASE.csv')
# Substraemos las comas de los valores
pv <- sub(",","", sub(",","", data$Precio_Venta, fixed=TRUE), fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Substraemos las comas de los valores
pv <- sub(",","",
sub(",","",
sub(".",".",
data$Precio_Venta,
fixed=TRUE),
fixed=TRUE),
fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Cargamos la data
data <- read.csv('BASE.csv')
# Substraemos las comas de los valores
data$Precio_Venta <- sub(",","",
sub(",","",
sub(".",".",
data$Precio_Venta,
fixed=TRUE),
fixed=TRUE),
fixed=TRUE)
# Convertimos de "chr" a "num"
pv <- as.numeric(pv)
# Convertimos de "chr" a "num"
data$Precio_Venta  <- as.numeric(data$Precio_Venta)
View(data)
var(data$Precio_Venta)
# Cargamos la data
data <- read.csv('BASE.csv')
# Calculamos las medidas para la columna Superficie
var_sup <- var(data$Superficie)
sd_sup <- sd(data$Superficie)
ric_sup <- quantile(data$Superficie, 0.75) - quantile(data$Superficie, 0.25)
# Convertimos los datos de la columna Precio_Venta the "character" a "numeric"
# para poder calcular sus medidas.
# Primero fijamos la cantidad de dígitos permitidos al convertir
options(digits=9)
# Substraemos las comas de los valores
data$Precio_Venta <- sub(",","",
sub(",","",
data$Precio_Venta,
fixed=TRUE),
fixed=TRUE)
# Convertimos de "chr" a "num"
data$Precio_Venta  <- as.numeric(data$Precio_Venta)
# Checamos el tipo de los datos
typeof(pv)
var_pv <- var(data$Precio_Venta)
sd_pv <- sd(pv)
ric_pv <- quantile(pv, 0.75) - quantile(pv, 0.25)
var_pv <- var(data$Precio_Venta)
sd_pv <- sd(data$Precio_Venta)
ric_pv <- quantile(data$Precio_Venta, 0.75) - quantile(data$Precio_Venta, 0.25)
# Cargamos la librería necesaria para calcular dicho coeficiente
install.packages("moments")
library(moments)
ca_sup <- skewness(data$Superficie)
ca_pv <- skewness(data$Precio_Venta)
# Cargamos la data
data <- read.csv('BASE.csv')
typeof(data$Precio_Venta)
typeof(data$Precio_Venta[1])
# Cargamos la data
data <- read.csv('BASE.csv')
# Calculamos las medidas para la columna Superficie
var_sup <- var(data$Superficie)
sd_sup <- sd(data$Superficie)
ric_sup <- quantile(data$Superficie, 0.75) - quantile(data$Superficie, 0.25)
# Convertimos los datos de la columna Precio_Venta de "character" a "numeric"
# para poder calcular sus medidas.
# Substraemos las comas de los valores
data$Precio_Venta <- sub(",","",
sub(",","",
data$Precio_Venta,
fixed=TRUE),
fixed=TRUE)
# Convertimos de "chr" a "num"
data$Precio_Venta  <- as.numeric(data$Precio_Venta)
# Checamos el tipo de los datos
typeof(pv)
# Seguros de que es un numeric, calculamos sus medidas
var_pv <- var(data$Precio_Venta)
sd_pv <- sd(data$Precio_Venta)
ric_pv <- quantile(data$Precio_Venta, 0.75) - quantile(data$Precio_Venta, 0.25)
"
6. Para las variables numéricas Superficie y Precio de Venta investigue cómo
calcular el coeficiente de asimetría y mencione si los datos son simétricos o
asimétricos (si son asimétricos son sesgados a la izquierda o a la derecha).
"
# Como vimos en clase, el Coeficiente de Asimetría (skewness) respeta la
# siguiente ecuación:
# Cargamos la librería necesaria para calcular dicho coeficiente
install.packages("moments")
library(moments)
# Calculamos los coeficientes para ambas columnas
ca_sup <- skewness(data$Superficie)
ca_pv <- skewness(data$Precio_Venta)
# Notamos que el coeficiente de la columa Superficie es negativo, siendo así que
# dicha variable está sesgada a la derecha. Mientras que el coeficiente de la
# columna Precio_Venta es positivo, diciendo que esta variable está sesgada a la
# izquierda.
# Naturalmente podemos afirmar que los datos son asimétricos.
"
7. Para las variables numéricas Superficie y Precio de Venta investigue cómo
calcular el coeficiente de curtosis y mencione si los datos son mesocráticos,
platicurticos o leptocurticos.
"
install.packages("moments")
kur_sup <- kurtosis(data$Superficie)
library(moments)
kur_sup <- kurtosis(data$Superficie)
kur_pv <- kurstosis(data$Precio_Venta)
kur_pv <- kurtosis(data$Precio_Venta)
data <- read.csv('Desktop/Inferencia R/BASE.csv')
data <- read.csv('BASE.csv')
#Grafiquemos la tabla de Tipo_de_inmueble.
barplot(table(data$Tipo_de_Inmueble),col=c("yellow", "magenta"))
#Grafiquemos la tabla de Operación
barplot(table(data$Operacion),col=c("red1","limegreen"))
#Graficamos la tabla de Provincia
barplot(table(data$Provincia),col=c("darkorange1","yellowgreen","mediumvioletred","deepskyblue1"))
typeof(1:10)
#Grafiquemos la variable Provincia en una grafica de pastel
pie(table(data$Provincia),col=c("darkturquoise","gold1","olivedrab2","plum1"))
text(0.40,0.23,"27.019%",cex=1.1)
text(-0.40,0.20,"27.81%",cex=1.1)
text(0.40,-0.23,"24.23%",cex=1.1)
text(-0.27,-0.40,"20.92%",cex=1.1)
#Graficamos la tabla de Provincia
barplot(
table(data$Provincia),
col=c("darkorange1","yellowgreen","mediumvioletred","deepskyblue1")
)
pie(table(data$Provincia),col=c("darkturquoise","gold1","olivedrab2","plum1"))
text(0.40,0.23,"27.019%",cex=1.1)
text(-0.40,0.20,"27.81%",cex=1.1)
text(0.40,-0.23,"24.23%",cex=1.1)
text(-0.27,-0.40,"20.92%",cex=1.1)
#Mediana
median(data$Superficie)
#Media
mean(data$Superficie)
quantile(data$Superficie,0.10)
quantile(data$Superficie,0.25)
quantile(data$Superficie,0.50)
quantile(data$Superficie,0.75)
quantile(data$Superficie,0.90)
#Media
mean(data$Precio_Venta)
#Media
mean(data$Precio_Venta)
data <- read.csv('BASE.csv')
#Grafiquemos la tabla de Tipo_de_inmueble.
barplot(table(data$Tipo_de_Inmueble),col=c("yellow", "magenta"))
#Grafiquemos la tabla de Operación
barplot(table(data$Operacion),col=c("red1","limegreen"))
#Graficamos la tabla de Provincia
barplot(
table(data$Provincia),
col=c("darkorange1","yellowgreen","mediumvioletred","deepskyblue1")
)
"3.Investigue cómo hacer una gráfica de pie o pastel en R para describir la
variable Provincia y grafiquela en R"
#Grafiquemos la variable Provincia en una grafica de pastel
pie(table(data$Provincia),col=c("darkturquoise","gold1","olivedrab2","plum1"))
text(0.40,0.23,"27.019%",cex=1.1)
text(-0.40,0.20,"27.81%",cex=1.1)
text(0.40,-0.23,"24.23%",cex=1.1)
text(-0.27,-0.40,"20.92%",cex=1.1)
"4.Para las variables numèricas Superficie y Precio de Venta calcule las medidas
de tendencia central Media, Mediana y los percentiles 10%, 25%, 50%, 75%, 90%"
#Mediana
median(data$Superficie)
#Media
mean(data$Superficie)
#Percentiles
quantile(data$Superficie,0.10)
quantile(data$Superficie,0.25)
quantile(data$Superficie,0.50)
quantile(data$Superficie,0.75)
quantile(data$Superficie,0.90)
#Media
mean(data$Precio_Venta)
#Mediana
median(data$Precio_Venta)
#Percentiles
quantile(data$Precio_Venta, 0.10)
quantile(data$Precio_Venta, 0.25)
quantile(data$Precio_Venta, 0.50)
quantile(data$Precio_Venta, 0.75)
quantile(data$Precio_Venta, 0.90)
# Substraemos las comas de los valores
data$Precio_Venta <- sub(",","",
sub(",","",
data$Precio_Venta,
fixed=TRUE),
fixed=TRUE)
# Convertimos de "chr" a "num"
data$Precio_Venta  <- as.numeric(data$Precio_Venta)
#Media
mean(data$Precio_Venta)
#Mediana
median(data$Precio_Venta)
#Percentiles
quantile(data$Precio_Venta, 0.10)
quantile(data$Precio_Venta, 0.25)
quantile(data$Precio_Venta, 0.50)
quantile(data$Precio_Venta, 0.75)
quantile(data$Precio_Venta, 0.90)
# Calculamos las medidas para Superficie
#Varianza muestral
var(data$Superficie)
#Desviacion estándar
sd(data$Superficie)
#RIC
quantile(data$Superficie, 0.75) - quantile(data$Superficie, 0.25)
#Calculamos las medidas para Precio de Venta
#Varianza muestral
var(data$Precio_Venta)
#Desviación Estandar
sd(data$Precio_Venta)
#RIC
quantile(data$Precio_Venta, 0.75) - quantile(data$Precio_Venta, 0.25)
"6. Para las variables numéricas Superficie y Precio de Venta investigue cómo
calcular el coeficiente de asimetría y mencione si los datos son simétricos o
asimétricos (si son asimétricos son sesgados a la izquierda o a la derecha)."
# Cargamos la librería necesaria para calcular dicho coeficiente
install.packages("moments")
install.packages("moments")
library(moments)
# Calculamos los coeficientes para ambas columnas
skewness(data$Superficie)
skewness(data$Precio_Venta)
"7. Para las variables numéricas Superficie y Precio de Venta investigue cómo
calcular el coeficiente de curtosis y mencione si los datos son mesocráticos,
platicurticos o leptocurticos."
kurtosis(data$Superficie)
kurtosis(data$Precio_Venta)
# Con la información anterior, podemos decir que los datos de la columna de
# Con la información anterior, podemos decir que los datos de la columna de
# Superficie son platicurtica (porque el coeficiente es negativo), mientras que
# Con la información anterior, podemos decir que los datos de la columna de
# Superficie son platicurtica (porque el coeficiente es negativo), mientras que
# los datos correspondientes a la columna de Punto_Venta son leptocurtica
# Con la información anterior, podemos decir que los datos de la columna de
# Superficie son platicurtica (porque el coeficiente es negativo), mientras que
# los datos correspondientes a la columna de Punto_Venta son leptocurtica
# (porque) el coeficiente es positivo).
quantile(data$Superficie,0.50)
quantile(data$Precio_Venta, 0.50)
setwd("~/Projects/learning.statistics_fciencias/Part_One/Homework_1")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
